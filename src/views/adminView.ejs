<!doctype html>
<html lang="en">

<head>
  <title><%=title%></title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="theme-color" content="#333" />
  <meta name="description" content="Mini library">
  <meta name="keywords" content="library, books">
  <meta name="author" content="Karol Bulwin">
  <!-- Fonts -->
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css"
    integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
  <!-- Bootstrap CSS -->
  <link href="css/bootstrap.min.css" rel="stylesheet">
  <!-- CSS-->
  <link href="css/styles.css" rel="stylesheet">
</head>

<body>
  <div class="d-flex justify-content-between flex-column min-vh-100">
    <header>
      <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="/">Library</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
          aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav mr-auto">
            <%for(let i=0; i<nav.length; i++) {%>
            <li class="nav-item">
              <a class="nav-link" href="<%=nav[i].link%>"><%=nav[i].title%></a>
            </li>
            <%}%>
          </ul>
          <form class="form-inline my-2 my-lg-0" action="/search" method="POST">
            <input class="form-control mr-sm-2" name="userSearch" type="search" placeholder="Search" aria-label="Search">
            <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
          </form>
        </div>
      </nav>
    </header>
  
    <main>
      <div class="container-fluid">
        <div class="row">
          <div class="col-sm-12 text-center py-3">
            <h1><%=title%></h1>
          </div>
        </div>
        <div class="row mb-3">
          <div class="col-12 mb-2">
            <h2>Books to pick up</h2>
          </div>
          <div id="books-to-pick-up" class="col-12">
          </div>
        </div>
        <div class="row mb-3">
          <div class="col-12 mb-2">
            <h2>Rented books</h2>
          </div>
          <div id="rented-books" class="col-12">
          </div>
        </div>
        <div class="row mb-5">
          <div class="col-12">
            <h2 class="mb-4">Books</h2>
            <div id="all-books">
            </div>
            <a id="add-books-sample" href="/admin/addBooks" class="btn btn-sm btn-outline-success mr-2">Add books - sample</a>
            <button id='add-new-book' class="btn btn-sm btn-outline-success mr-2" data-toggle="modal" data-target="#book-modal">Add new book!</button>
          </div>
        </div>       
      </div>

      <!-- Modal -->
      <div class="modal fade" id="book-modal" tabindex="-1" role="dialog" aria-labelledby="book-info" aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="book-info">Book editing</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <form class="needs-validation" novalidate name="bookForm" action="/admin/addBook" method="post">
                <div class="form-group">
                  <label for="title">Title</label>
                  <input type="text" class="form-control" name="title" id="title" placeholder="Title" 
                  pattern="^[A-Za-z0-9 ]{2,50}$" required>
                  <div class="valid-feedback">
                    Looks good!
                  </div>
                  <div class="invalid-feedback">
                    2-50 characters. Whitespace allowed.
                  </div>
                </div>
                <div class="form-group">
                  <label for="author">Author</label>
                  <input type="text" class="form-control" name="author" id="author" placeholder="Author" 
                  pattern="^[A-Za-z\. ]{2,30}$" required>
                  <div class="valid-feedback">
                    Looks good!
                  </div>
                  <div class="invalid-feedback">
                    Only letters 2-30 characters. No special characters!
                  </div>
                </div>
                <div class="form-group">
                  <label for="genre">Genre</label>
                  <input type="text" class="form-control" name="genre" id="genre" placeholder="Genre" 
                  pattern="^[A-Za-z ]{2,30}$" required>
                  <div class="valid-feedback">
                    Looks good!
                  </div>
                  <div class="invalid-feedback">
                    Only letters 2-30 characters. No special characters!
                  </div>
                </div>
                <div class="">
                  <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">Close</button>
                  <button id="save-bttn" type="button" class="btn btn-outline-success">Save changes</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

    </main>

    <footer class="d-flex justify-content-center bg-light py-2">
      <p class="my-0 small">Created by: Karol Bulwin</p>
    </footer>
  </div>
  <!-- script references -->
  <script src="js/jquery.min.js"></script>
  <script src="js/bootstrap.min.js"></script>
  <script src="js/custom-validation.js"></script>
  <script>

  function setModalTitle(text) {
    document.querySelector('#book-info').innerText = text;
  }

  function getBookValues() {
    const book = {};    
    book.title = document.querySelector('#title').value;
    book.author = document.querySelector('#author').value;
    book.genre = document.querySelector('#genre').value;
    return book;
  }

  document.querySelector("#add-new-book").onclick = () => {
    setModalTitle('Enter the details of the book below');
    document.querySelector('#save-bttn').onclick = () => {
      const book = getBookValues();    

      const b = JSON.stringify(book);
      const xhr = new XMLHttpRequest();
      
      xhr.onreadystatechange = () => {
        setTimeout(() => {
          window.location.reload();
        }, 200);
      };
      
      xhr.open('POST', '/admin/addBook', true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.send(b);
    }
  };
  
      
  function loadBooksFromDB() {
    const books = <%- JSON.stringify(books) %>;
    return books;
  }

  function createBookElementToPickUp(book) {
    const div = document.createElement('div');
    const pBook = document.createElement('p');
    const pUser = document.createElement('p');
    const sTitle = document.createElement('span');
    const sAuthor = document.createElement('span');
    const sReservedBy = document.createElement('span');
    const bGive = document.createElement('buton');
    const aCancel = document.createElement('buton');

    div.classList.add('py-2');

    pBook.innerText = 'Book: ';
    sTitle.innerText = book.title;
    pBook.appendChild(sTitle);
    pBook.innerText += ' by ';
    sAuthor.innerText = book.author;
    pBook.appendChild(sAuthor);
    div.appendChild(pBook);

    pUser.innerText = 'User: ';
    sReservedBy.innerText = book.reservedBy;
    pUser.appendChild(sReservedBy);
    div.appendChild(pUser);

    bGive.innerText = 'Give the book to the user';
    bGive.classList.add('btn', 'btn-sm', 'btn-outline-success', 'mr-2');
    div.appendChild(bGive);

    aCancel.innerText = 'Cancel';
    aCancel.classList.add('btn', 'btn-sm', 'btn-outline-success', 'mr-2');
    div.appendChild(aCancel);

    bGive.onclick = () => {
      const b = JSON.stringify(book);
      const xhr = new XMLHttpRequest();

      xhr.onreadystatechange = () => {
        setTimeout(() => {
          window.location.reload();
        }, 200);
      };

      xhr.open('POST', '/admin/giveBookToTheUser', true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.send(b);
    };
    aCancel.onclick = () => {
      const b = JSON.stringify(book);
      const xhr = new XMLHttpRequest();

      xhr.onreadystatechange = () => {
        setTimeout(() => {
          window.location.reload();
        }, 200);
      };

      xhr.open('POST', '/admin/cancelReservation', true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.send(b);
    };

    return div;
  }
  (function booksToPickUp() {
    const books = loadBooksFromDB();
    const booksToPickUpContainer = document.querySelector('#books-to-pick-up');
    let bookToAdd;
    books.forEach((book) => {
      if (book.reservedBy !== null) {
        bookToAdd = createBookElementToPickUp(book);
        booksToPickUpContainer.appendChild(bookToAdd);
      }
    });
  }());

  function createRentedBookElement(book) {
    const div = document.createElement('div');
    const pBook = document.createElement('p');
    const pUser = document.createElement('p');
    const sTitle = document.createElement('span');
    const sAuthor = document.createElement('span');
    const sRentedBy = document.createElement('span');
    const bTake = document.createElement('buton');

    div.classList.add('py-2');

    pBook.innerText = 'Book: ';
    sTitle.innerText = book.title;
    pBook.appendChild(sTitle);
    pBook.innerText += ' by ';
    sAuthor.innerText = book.author;
    pBook.appendChild(sAuthor);
    div.appendChild(pBook);

    pUser.innerText = 'User: ';
    sRentedBy.innerText = book.rentedBy;
    pUser.appendChild(sRentedBy);
    div.appendChild(pUser);

    bTake.innerText = 'Take the book from the user';
    bTake.classList.add('btn', 'btn-sm', 'btn-outline-success', 'mr-2');
    div.appendChild(bTake);

    bTake.onclick = () => {
      const b = JSON.stringify(book);
      const xhr = new XMLHttpRequest();
      
      xhr.onreadystatechange = () => {
        setTimeout(() => {
          window.location.reload();
        }, 200);
      };

      xhr.open('POST', '/admin/takeTheBookFromTheUser', true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.send(b);
    };

    return div;
  }
  (function booksToTake() {
    const books = loadBooksFromDB();
    const rentedBooks = document.querySelector('#rented-books');
    let rentedBook;
    books.forEach((book) => {
      if (book.rentedBy !== null) {
        rentedBook = createRentedBookElement(book);
        rentedBooks.appendChild(rentedBook);
      }
    });
  }());

  function createBookElement(book) {
    const divContent = document.createElement('div');
    const div = document.createElement('div');
    const cdivTitleAuthor = document.createElement('div');
    const cdivButtons = document.createElement('div');
    const hr = document.createElement('hr');

    const pTtitle = document.createElement('p');
    const pAuthor = document.createElement('p');

    const rdiv = document.createElement('div');
    const editBtn = document.createElement('button');
    const deleteBtn = document.createElement('button');
    const readBtn = document.createElement('a');

    div.classList.add('row');
    cdivTitleAuthor.classList.add('col-12');
    cdivButtons.classList.add('col-12');

    pTtitle.innerText = book.title;
    cdivTitleAuthor.appendChild(pTtitle);

    pAuthor.innerText = `by ${book.author}`;
    cdivTitleAuthor.appendChild(pAuthor);

    div.appendChild(cdivTitleAuthor);

    rdiv.classList.add('row', 'mx-2', 'align-items-baseline');
    editBtn.classList.add('btn', 'btn-sm', 'btn-outline-success', 'mr-2');
    editBtn.setAttribute('data-toggle', 'modal');
    editBtn.setAttribute('data-target', '#book-modal');
    editBtn.innerText = 'Edit';
    deleteBtn.classList.add('btn', 'btn-sm', 'btn-outline-success', 'mr-2');
    deleteBtn.innerText = 'Delete';
    readBtn.classList.add('btn', 'btn-sm', 'btn-outline-success', 'mr-2');
    readBtn.href = `/books/${book._id}`;
    readBtn.innerText = 'Read More';

    rdiv.appendChild(editBtn);
    rdiv.appendChild(deleteBtn);
    rdiv.appendChild(readBtn);
    cdivButtons.appendChild(rdiv);

    div.appendChild(cdivTitleAuthor);
    div.appendChild(cdivButtons);

    divContent.appendChild(div);
    divContent.appendChild(hr);


    function setBookValues() {
      document.querySelector('#title').value = book.title;
      document.querySelector('#author').value = book.author;
      document.querySelector('#genre').value = book.genre;
    }

    editBtn.onclick = () => {
      setBookValues();
      setModalTitle('Book editing');
      
      document.querySelector('#save-bttn').onclick = () => {
        book.title = document.querySelector('#title').value;
        book.author = document.querySelector('#author').value;
        book.genre = document.querySelector('#genre').value;
        
        const b = JSON.stringify(book);
        const xhr = new XMLHttpRequest();
        
        xhr.onload = () => {
          const res = JSON.parse(xhr.response);
          if (res.result === 'changed') {
            document.querySelector('.close[type=button]').click();
            pTtitle.innerText = book.title;
            pAuthor.innerText = `by ${book.author}`;
          }
        };
        
        xhr.open('POST', '/admin/editBook', true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(b);
      }
    };

    deleteBtn.onclick = () => {
      const b = JSON.stringify(book);
      const xhr = new XMLHttpRequest();

      xhr.onload = () => {
        const res = JSON.parse(xhr.response);
        if (res.result === 'deleted') {
          divContent.remove();
        }
      };

      xhr.open('POST', '/admin/deleteBook', true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.send(b);
    };

    if (book.isReserved || book.isRented) {
      editBtn.setAttribute('disabled', true);
      deleteBtn.setAttribute('disabled', true);
    }

    return divContent;
  }
  (function bookManagement() {
    const books = loadBooksFromDB();
    const allBooks = document.querySelector('#all-books');
    let bookToAdd;
    books.forEach((book) => {
      bookToAdd = createBookElement(book);
      allBooks.appendChild(bookToAdd);
    });
  }());

  </script>
  <script src="js/hide-add-books-btn.js"></script>
</body>

</html>